# 0. 가상환경
    - 나중에 다른 서버에 이 서비스를 설치하더라도 같은 패킺, 버전을 위해
    - $ python -m venv 가상환경명
    - 차곡차곡 우리가 이 서비스만을 위한 라이브러리를 쌓을 것입니다.
    - pip upgrade
    
    flask


# 1. 
woorifisa 폴더에 
app.py로 시작하는 flask 프레임워크를 하나 만들겁니다. 

/about_me

저는 **name 입니다** 

/hello :안녕하세요
/bye : 잘 가세요 

- 한장의 파일로 작성해 보시고
# 2. 어플리케이션 팩토리 방식 이용 -> 2_app 폴더의 __init__.py 파일 참조
- create_app()  으로 시작하는 플라스크 앱으로 만들어 주시고
    - 모든 객체를 글로벌 속성으로 사용해서 생기는 오류를 막아줍니다

# 3. blueprint를 통해 기능별로 view 분할  -> app 폴더를 참조
- fisa/ 도메인을 앞에 붙여서 작동하도록 변경해주세요
    - fisa/about_me
    - fisa/hello
    - fisa/bye


# 4. view를 위한 blueprint를 하나 더 추가
- 본인이름/
    - 본인이름/about_me
    - 본인이름/hello
    - 본인이름/bye

# 5. flask-migrate 패키지를 통한 질문-답변 모델 생성
    - 기본적으로 CRUD

- 질문 테이블은
    - 외부적으로: 번호, 작성자, 내용
    - 내부적으로: 번호, 작성자, 내용,
                 수정여부를 무엇으로 기록할 것인지 
                    - 수정 횟수를 누적하는 방법
                    - 시간으로 타임스탬프를 사용하는 방법

- 답변 테이블은
    - 외부적으로: 번호, 작성자, 내용
    - 내부적으로: 번호, 작성자, 내용
                 수정여부를 무엇으로 기록할 것인지 
                    - 어떤 질문에 대한 답변인지 (foreign key로 걸어서 질문 번호를 연결)


- config.py 에 db에 관한 내용 작성
- __init__.py 에게 db에 관한 정보를 등록
- ORM을 사용하는 이유: 서로 다른 쿼리를 다 몰라도, 알아서 통역을 해준다
- ORM 쿼리로 코드를 작성하지만, 
    - 작업을 하고 나면 commit()을 해줘야 db에 적용된다
    - commit 하기 전에 작업하던 내용을 취소하고 싶다면 rollback()을 해주면 된다

- flask: HTML, JS, CSS 코드 사이에 파이썬 코드를 삽입해서 데이털르 가지고 온다
- jinja 템플릿이 shell 커맨드를 기반으로 한 ORM 을 사용한다


- models.py에 클래스를 만든다
- __init__에 알려준다
- views에서 쓴다고 import

- flask db migrate
- flask db upgrade